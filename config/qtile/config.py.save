from libqtile import bar, layout, widget, qtile
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
import os
from libqtile.widget.battery import BatteryState
from libqtile.log_utils import logger



# Colors

colors = {
    "bg" : "#1f1d2e",
    "fg" : "#e0def4",
    "fg_gutter" : "#ff0000",
    "active" : "#c77dff",
    "focused" : "#ade8f4",
    "other_screen_focused" : "#0077b6",
    "inactive" : "#6c757d",
    'low_bg' : "#212529",
    'low_fg' : "#e5383b",
    "border_focus" : "#c77dff",
    "border_normal" : "#6c757d"
}


class MyBattery(widget.Battery):
    def build_string(self, status):
        super().build_string(status)
        char = status.state
        if status.state == BatteryState.CHARGING:
            char = self.charging(status.percent)
        elif status.state == BatteryState.DISCHARGING:
            char = self.discharging(status.percent)
        elif status.state == BatteryState.FULL:
            char = ''
        elif status.state == BatteryState.EMPTY:
            char = ''
        elif status.state == BatteryState.UNKNOWN:
            char = ''
    
        hour = status.time // 3600
        minute = (status.time // 60) % 60
        
        logger.warning(status, status.state)
        return self.format.format(
            char=char, percent=status.percent, watt=status.power, hour=hour, min=minute
        )

    def charging(self, percent):
        icons = [
            '', '', '', '', '', ''
        ]
        if percent <= 0.20: return icons[0]
        if percent <= 0.30: return icons[1]
        if percent <= 0.40: return icons[2]
        if percent <= 0.60: return icons[3]
        if percent <= 0.80: return icons[4]
        return icons[5]
    
    def discharging(self, percent):
        icons = [
            '', '', '', '', '', ''
        ]
        if percent <= 0.20: return icons[0]
        if percent <= 0.30: return icons[1]
        if percent <= 0.40: return icons[2]
        if percent <= 0.60: return icons[3]
        if percent <= 0.80: return icons[4]
        return icons[5]
    
    def mouse_enter(self, *args, **kwargs):
        self.format = " {char} {percent:2.0%} {hour}:{min:02d}"
    def mouse_leave(self, *args, **kwargs):
        self.format = " {char} {percent:2.0%}"


def myBattery():
    return MyBattery(
        font = "Roboto Medium",
        background= colors["bg"],
        foreground= colors["fg"],
        notify_below= 0.2,
        low_percentage= 0.2,
        low_background= colors["bg"],
        low_foreground= colors["low_fg"],
        update_interval= 0.5,
        format= " {char} {percent:2.0%}",
        show_short_text= False,
    )


mod = "mod4"
terminal = guess_terminal()
home = os.path.expanduser('~')

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),

    # Custom
    # Volume
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -2%")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +2%")),

    # Key([], "F11", lazy.spawn(home + "/.local/bin/brightnesscontrol down")),
    # Key([], "F12", lazy.spawn(home + "/.local/bin/brightnesscontrol up")),

    Key([], "Print", lazy.spawn("xfce4-screenshooter -r"))
]

# group_icons = [
#     "", # Terminal
#     "", # Browshttps://fontawesome.com/icons/window?s=solider
#     "", # Folder,
#     "", # Game
#     "", # Video
#     "" # Random
# ]

workspaces = [
    {"name": "", "key": "1", "matches": [Match(wm_class=terminal)]},
    {"name": "", "key": "2", "matches": [Match(wm_class='firefox')]},
    {"name": "", "key": "3", "matches": [Match(wm_class='Thunar')]},
    {"name": "", "key": "4", "matches": [Match(wm_class='vlc')]},
    {"name": "", "key": "5", "matches": []},
]

# groups = [Group(i) for i in "123456789"]




groups = []
for workspace in workspaces:
    matches = workspace["matches"] if "matches" in workspace else None
    groups.append(Group(workspace["name"], matches=matches, layout="monadtall"))
    keys.append(Key([mod], workspace["key"], lazy.group[workspace["name"]].toscreen()))
    keys.append(Key([mod, "shift"], workspace["key"], lazy.window.togroup(workspace["name"])))

# for i in groups:
#     keys.extend(
#         [
#             # mod1 + letter of group = switch to group
#             Key(
#                 [mod],
#                 i.name,
#                 lazy.group[i.name].toscreen(),
#                 desc="Switch to group {}".format(i.name),
#             ),
#             # mod1 + shift + letter of group = switch to & move focused window to group
#             Key(
#                 [mod, "shift"],
#                 i.name,
#                 lazy.window.togroup(i.name, switch_group=True),
#                 desc="Switch to & move focused window to group {}".format(i.name),
#             ),
#             # Or, use below if you prefer not to switch to that group.
#             # # mod1 + shift + letter of group = move focused window to group
#             # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
#             #     desc="move focused window to group {}".format(i.name)),
#         ]
#     )

layouts = [
    layout.Columns(
        border_focus = colors["border_focus"], 
        border_width=3,
        border_normal = colors["border_normal"],
        margin = 3),        
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font="FontAwesome",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.Spacer(
                    length = 10,
                    background = colors["bg"]),
                # widget.CurrentLayout(),
                widget.GroupBox(
                    background = colors["bg"],
                    active = colors["active"],
                    borderwidth = 0,
                    foreground = colors["fg"],
                    inactive = colors["inactive"],
                    padding_x = 3,
                    font = 'FontAwesome',
                    fontsize = 16,
                    highlight_method = 'text',
                    rounded = False,
                    highlight_color = colors["fg"]
                ),
                widget.Prompt(),
                widget.Sep(
                    linewidth=300,
                    padding=5,
                    foreground=colors["bg"],
                    background=colors["bg"]
                ),
                widget.WindowName(
                    background = colors["bg"],
                    font = 'Roboto Medium',
                    empty_group_string = ' ',
                    foreground = colors["fg"],
                    format = '{name}',
                    max_chars = 50
                ),
                # widget.Chord(
                #     chords_colors={
                #         "launch": ("#ff0000", "#ffffff"),
                #     },
                #     name_transform=lambda name: name.upper(),
                # ),
                widget.Systray(
                    background = colors["bg"]
                ),
                widget.Volume(
                    background = colors["bg"],
                    emoji = False,
                    font = 'Roboto Medium',
                    fontsize = 10,
                    fmt = "{}",
                    theme_path = '/home/meet/.icons/kora-light-panel/panel/24/',
                    update_interval = 1,
                    mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn("pavucontrol")}
                ),
                # widget.Battery(
                #     background = colors["bg"],
                #     font = 'FontAwesome',
                #     foreground = colors["fg"],
                #     charge_char = "",
                #     charge_full = '',
                #     discharge_char = '',
                #     format = "{char} {percent:2.0%}",
                #     update_interval = 1,
                #     low_foreground = '#ff0000',
                #     full_char = "",
                #     empty_char = ""
                # ),
                myBattery(),
                widget.Clock(
                    format = "%H:%M %p",
                    background = colors["bg"],
                    font = "Roboto Medium",
                    foreground = colors["fg"]),
                # widget.QuickExit(),
                widget.Image(
                    background = colors["bg"],
                    filename = "~/.icons/kora-light-panel/panel/24/system-devices-panel.svg",
                    mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn("bash /home/meet/.config/polybar/shapes/scripts/powermenu.sh")}
                ),
                widget.CurrentLayoutIcon(
                    background = colors["bg"],
                    font = 'Roboto Medium',
                    foreground = colors["fg"]
                )
            ],
            24,
            opacity = 0.7
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client. Add floating windows here.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
        
        # Custom
        Match(wm_class = "Blueberry"), # Bluetooth
        Match(wm_class = "Nitrogen"), # Wallpaper manager
        Match(wm_class = "Steam"), # Steam
        Match(wm_class = "task manager"), # Task Manager
        Match(wm_class = "Nm-connection-editor"), # Network editor
        Match(wm_class = "Pavucontrol"), # Volume Manager
        Match(wm_class = "Audacious"), # Music Player
        Match(wm_class = "Transmission-gtk"), # Torrent downloader
        Match(wm_class = "Lxappearance"), # Theme customizer
        Match(wm_class = "TelegramDesktop") # Telegram Messenger
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True


# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/autostart.sh')
    subprocess.Popen([home])
